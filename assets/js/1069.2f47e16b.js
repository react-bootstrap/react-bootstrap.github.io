"use strict";(self.webpackChunkreact_bootstrap_website=self.webpackChunkreact_bootstrap_website||[]).push([[1069],{41069:e=>{e.exports=JSON.parse('{"description":"","props":{"in":{"required":false,"tsType":{"name":"union","raw":"boolean | undefined","elements":[{"name":"boolean"},{"name":"undefined"}]},"description":"Show the component; triggers the expand or collapse animation","defaultValue":{"value":"false","computed":false},"doclets":{}},"mountOnEnter":{"required":false,"tsType":{"name":"union","raw":"boolean | undefined","elements":[{"name":"boolean"},{"name":"undefined"}]},"description":"Wait until the first \\"enter\\" transition to mount the component (add it to the DOM)","defaultValue":{"value":"false","computed":false},"doclets":{}},"unmountOnExit":{"required":false,"tsType":{"name":"union","raw":"boolean | undefined","elements":[{"name":"boolean"},{"name":"undefined"}]},"description":"Unmount the component (remove it from the DOM) when it is collapsed","defaultValue":{"value":"false","computed":false},"doclets":{}},"appear":{"required":false,"tsType":{"name":"union","raw":"boolean | undefined","elements":[{"name":"boolean"},{"name":"undefined"}]},"description":"Run the expand animation when the component mounts, if it is initially shown","defaultValue":{"value":"false","computed":false},"doclets":{}},"timeout":{"required":false,"tsType":{"name":"union","raw":"number | undefined","elements":[{"name":"number"},{"name":"undefined"}]},"description":"Duration of the collapse animation in milliseconds, to ensure that\\nfinishing callbacks are fired even if the original browser transition end\\nevents are canceled","defaultValue":{"value":"300","computed":false},"doclets":{}},"dimension":{"required":false,"tsType":{"name":"union","raw":"Dimension | (() => Dimension) | undefined","elements":[{"name":"union","raw":"\'height\' | \'width\'","elements":[{"name":"literal","value":"\'height\'"},{"name":"literal","value":"\'width\'"}]},{"name":"unknown"},{"name":"undefined"}]},"description":"The dimension used when collapsing, or a function that returns the\\ndimension","defaultValue":{"value":"\'height\'","computed":false},"doclets":{"type":"\'height\' | \'width\' | (() => \'height\' | \'width\')  | undefined"}},"getDimensionValue":{"required":false,"tsType":{"name":"union","raw":"| ((dimension: Dimension, element: HTMLElement) => number)\\n| undefined","elements":[{"name":"unknown"},{"name":"undefined"}]},"description":"Function that returns the height or width of the animating DOM node\\n\\nAllows for providing some custom logic for how much the Collapse component\\nshould animate in its specified dimension. Called with the current\\ndimension prop value and the DOM node.","defaultValue":{"value":"function getDefaultDimensionValue(\\n  dimension: Dimension,\\n  elem: HTMLElement,\\n): number {\\n  const offset = `offset${dimension[0].toUpperCase()}${dimension.slice(1)}`;\\n  const value = elem[offset];\\n  const margins = MARGINS[dimension];\\n\\n  return (\\n    value +\\n    // @ts-expect-error TODO\\n    parseInt(css(elem, margins[0]), 10) +\\n    // @ts-expect-error TODO\\n    parseInt(css(elem, margins[1]), 10)\\n  );\\n}","computed":false},"doclets":{"type":"((dimension: Dimension, element: HTMLElement) => number) | undefined","default":"element.offsetWidth | element.offsetHeight"}},"children":{"required":true,"tsType":{"name":"ReactReactElement","raw":"React.ReactElement"},"description":"You must provide a single JSX child element to this component and that element cannot be a \\\\<React.Fragment\\\\>","doclets":{}}}}')}}]);