"use strict";(self.webpackChunkreact_bootstrap_website=self.webpackChunkreact_bootstrap_website||[]).push([[7759],{28453:(e,t,o)=>{o.d(t,{R:()=>i,x:()=>l});var n=o(96540);const r={},s=n.createContext(r);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:t},e.children)}},94105:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"forms/form-text","title":"Form text","description":"Create block-level or inline-level form text.","source":"@site/docs/forms/form-text.mdx","sourceDirName":"forms","slug":"/forms/form-text","permalink":"/docs/forms/form-text","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Form text","description":"Create block-level or inline-level form text.","sidebar_position":3},"sidebar":"sidebar","previous":{"title":"Form controls","permalink":"/docs/forms/form-control"},"next":{"title":"Select","permalink":"/docs/forms/select"}}');var r=o(74848),s=o(28453);const i='import Form from \'react-bootstrap/Form\';\n\nfunction FormTextExample() {\n  return (\n    <>\n      <Form.Label htmlFor="inputPassword5">Password</Form.Label>\n      <Form.Control\n        type="password"\n        id="inputPassword5"\n        aria-describedby="passwordHelpBlock"\n      />\n      <Form.Text id="passwordHelpBlock" muted>\n        Your password must be 8-20 characters long, contain letters and numbers,\n        and must not contain spaces, special characters, or emoji.\n      </Form.Text>\n    </>\n  );\n}\n\nexport default FormTextExample;\n',l={title:"Form text",description:"Create block-level or inline-level form text.",sidebar_position:3},c=void 0,a={},d=[{value:"Overview",id:"overview",level:2},{value:"API",id:"api",level:2},{value:"FormText",id:"formtext",level:3}];function m(e){const t={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",...(0,s.R)(),...e.components},{CodeBlock:o,PropsTable:n}=t;return o||x("CodeBlock",!0),n||x("PropsTable",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(t.p,{children:["Block-level help text in forms can be created using ",(0,r.jsx)(t.code,{children:"<Form.Text>"}),". Inline help\ntext can be flexibly implemented using any inline HTML element and utility classes\nlike ",(0,r.jsx)(t.code,{children:".text-muted"}),"."]}),"\n",(0,r.jsx)(t.admonition,{title:"Associating help text with form controls",type:"tip",children:(0,r.jsxs)(t.p,{children:["Help text should be explicitly associated with the form control it relates to using\nthe ",(0,r.jsx)(t.code,{children:"aria-describedby"})," attribute. This will ensure that assistive technologies\u2014such\nas screen readers\u2014will announce this help text when the user focuses or enters\nthe control."]})}),"\n",(0,r.jsxs)(t.p,{children:["Form text below inputs can be styled with ",(0,r.jsx)(t.code,{children:"<Form.Text>"}),". This component includes\n",(0,r.jsx)(t.code,{children:"display: block"})," and adds some top margin for easy spacing from the inputs above."]}),"\n",(0,r.jsx)(o,{language:"jsx",live:!0,children:i}),"\n",(0,r.jsx)(t.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(t.h3,{id:"formtext",children:"FormText"}),"\n",(0,r.jsx)(n,{name:"FormText"})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}function x(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);