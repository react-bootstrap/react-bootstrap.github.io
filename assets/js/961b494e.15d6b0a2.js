"use strict";(self.webpackChunkreact_bootstrap_website=self.webpackChunkreact_bootstrap_website||[]).push([[2851],{6409:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>u,contentTitle:()=>m,default:()=>x,frontMatter:()=>p,metadata:()=>r,toc:()=>k});const r=JSON.parse('{"id":"forms/checks-radios","title":"Checks and radios","description":"Create consistent cross-browser and cross-device checkboxes and radios with our completely rewritten checks component.","source":"@site/docs/forms/checks-radios.mdx","sourceDirName":"forms","slug":"/forms/checks-radios","permalink":"/docs/forms/checks-radios","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Checks and radios","description":"Create consistent cross-browser and cross-device checkboxes and radios with our completely rewritten checks component.","sidebar_position":5},"sidebar":"sidebar","previous":{"title":"Select","permalink":"/docs/forms/select"},"next":{"title":"Range","permalink":"/docs/forms/range"}}');var t=o(74848),i=o(28453);const s="import Form from 'react-bootstrap/Form';\n\nfunction CheckExample() {\n  return (\n    <Form>\n      {['checkbox', 'radio'].map((type) => (\n        <div key={`default-${type}`} className=\"mb-3\">\n          <Form.Check // prettier-ignore\n            type={type}\n            id={`default-${type}`}\n            label={`default ${type}`}\n          />\n\n          <Form.Check\n            disabled\n            type={type}\n            label={`disabled ${type}`}\n            id={`disabled-default-${type}`}\n          />\n        </div>\n      ))}\n    </Form>\n  );\n}\n\nexport default CheckExample;\n",c="import Form from 'react-bootstrap/Form';\n\nfunction CheckApiExample() {\n  return (\n    <Form>\n      {['checkbox', 'radio'].map((type) => (\n        <div key={type} className=\"mb-3\">\n          <Form.Check type={type} id={`check-api-${type}`}>\n            <Form.Check.Input type={type} isValid />\n            <Form.Check.Label>{`Custom api ${type}`}</Form.Check.Label>\n            <Form.Control.Feedback type=\"valid\">\n              You did it!\n            </Form.Control.Feedback>\n          </Form.Check>\n        </div>\n      ))}\n    </Form>\n  );\n}\n\nexport default CheckApiExample;\n",a='import Form from \'react-bootstrap/Form\';\n\nfunction CheckInlineExample() {\n  return (\n    <Form>\n      {[\'checkbox\', \'radio\'].map((type) => (\n        <div key={`inline-${type}`} className="mb-3">\n          <Form.Check\n            inline\n            label="1"\n            name="group1"\n            type={type}\n            id={`inline-${type}-1`}\n          />\n          <Form.Check\n            inline\n            label="2"\n            name="group1"\n            type={type}\n            id={`inline-${type}-2`}\n          />\n          <Form.Check\n            inline\n            disabled\n            label="3 (disabled)"\n            type={type}\n            id={`inline-${type}-3`}\n          />\n        </div>\n      ))}\n    </Form>\n  );\n}\n\nexport default CheckInlineExample;\n',l='import Form from \'react-bootstrap/Form\';\n\nfunction CheckReverseExample() {\n  return (\n    <Form>\n      {[\'checkbox\', \'radio\'].map((type) => (\n        <div key={`reverse-${type}`} className="mb-3">\n          <Form.Check\n            reverse\n            label="1"\n            name="group1"\n            type={type}\n            id={`reverse-${type}-1`}\n          />\n          <Form.Check\n            reverse\n            label="2"\n            name="group1"\n            type={type}\n            id={`reverse-${type}-2`}\n          />\n          <Form.Check\n            reverse\n            disabled\n            label="3 (disabled)"\n            type={type}\n            id={`reverse-${type}-3`}\n          />\n        </div>\n      ))}\n    </Form>\n  );\n}\n\nexport default CheckReverseExample;\n',d='import Form from \'react-bootstrap/Form\';\n\nfunction NoLabelExample() {\n  return (\n    <>\n      <Form.Check aria-label="option 1" />\n      <Form.Check type="radio" aria-label="radio 1" />\n    </>\n  );\n}\n\nexport default NoLabelExample;\n',h='import Form from \'react-bootstrap/Form\';\n\nfunction SwitchExample() {\n  return (\n    <Form>\n      <Form.Check // prettier-ignore\n        type="switch"\n        id="custom-switch"\n        label="Check this switch"\n      />\n      <Form.Check // prettier-ignore\n        disabled\n        type="switch"\n        label="disabled switch"\n        id="disabled-custom-switch"\n      />\n    </Form>\n  );\n}\n\nexport default SwitchExample;\n',p={title:"Checks and radios",description:"Create consistent cross-browser and cross-device checkboxes and radios with our completely rewritten checks component.",sidebar_position:5},m=void 0,u={},k=[{value:"Default (stacked)",id:"default-stacked",level:2},{value:"Switches",id:"switches",level:2},{value:"Inline",id:"inline",level:2},{value:"Reverse",id:"reverse",level:2},{value:"Without labels",id:"without-labels",level:2},{value:"Customizing FormCheck rendering",id:"customizing-formcheck-rendering",level:2},{value:"API",id:"api",level:2},{value:"FormCheck",id:"formcheck",level:3},{value:"FormCheckInput",id:"formcheckinput",level:3},{value:"FormCheckLabel",id:"formchecklabel",level:3}];function b(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",strong:"strong",...(0,i.R)(),...e.components},{CodeBlock:o,PropsTable:r}=n;return o||y("CodeBlock",!0),r||y("PropsTable",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["For the non-textual checkbox and radio controls, ",(0,t.jsx)(n.code,{children:"FormCheck"}),"\nprovides a single component for both types that adds some additional\nstyling and improved layout."]}),"\n",(0,t.jsx)(n.h2,{id:"default-stacked",children:"Default (stacked)"}),"\n",(0,t.jsx)(n.p,{children:"By default, any number of checkboxes and radios that are immediate\nsibling will be vertically stacked and appropriately spaced with\nFormCheck."}),"\n",(0,t.jsx)(o,{language:"jsx",live:!0,children:s}),"\n",(0,t.jsx)(n.h2,{id:"switches",children:"Switches"}),"\n",(0,t.jsxs)(n.p,{children:["A switch has the markup of a custom checkbox but uses ",(0,t.jsx)(n.code,{children:'type="switch"'}),"\nto render a toggle switch. Switches also support the same customizable\nchildren as ",(0,t.jsx)(n.code,{children:"<FormCheck>"}),"."]}),"\n",(0,t.jsx)(o,{language:"jsx",live:!0,children:h}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["You can also use the ",(0,t.jsx)(n.code,{children:"<Form.Switch>"})," alias which encapsulates\nthe above, in a very small component wrapper."]})}),"\n",(0,t.jsx)(n.h2,{id:"inline",children:"Inline"}),"\n",(0,t.jsxs)(n.p,{children:["Group checkboxes or radios on the same horizontal row by adding the ",(0,t.jsx)(n.code,{children:"inline"})," prop."]}),"\n",(0,t.jsx)(o,{language:"jsx",live:!0,children:a}),"\n",(0,t.jsx)(n.h2,{id:"reverse",children:"Reverse"}),"\n",(0,t.jsxs)(n.p,{children:["Put your checkboxes, radios, and switches on the opposite side with the ",(0,t.jsx)(n.code,{children:"reverse"})," prop."]}),"\n",(0,t.jsx)(o,{language:"jsx",live:!0,children:l}),"\n",(0,t.jsx)(n.h2,{id:"without-labels",children:"Without labels"}),"\n",(0,t.jsxs)(n.p,{children:["When you render a FormCheck without a label (no ",(0,t.jsx)(n.code,{children:"children"}),")\nsome additional styling is applied to keep the inputs from collapsing."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Remember to add an ",(0,t.jsx)(n.code,{children:"aria-label"})," when omitting labels!"]})}),"\n",(0,t.jsx)(o,{language:"jsx",live:!0,children:d}),"\n",(0,t.jsx)(n.h2,{id:"customizing-formcheck-rendering",children:"Customizing FormCheck rendering"}),"\n",(0,t.jsxs)(n.p,{children:["When you need tighter control, or want to customize how the ",(0,t.jsx)(n.code,{children:"FormCheck"})," component\nrenders, it may better to use its constituent parts directly."]}),"\n",(0,t.jsxs)(n.p,{children:["By provided ",(0,t.jsx)(n.code,{children:"children"})," to the ",(0,t.jsx)(n.code,{children:"FormCheck"})," you can forgo the default rendering and\nhandle it yourself. (You can still provide an ",(0,t.jsx)(n.code,{children:"id"})," to the ",(0,t.jsx)(n.code,{children:"FormCheck"})," or\n",(0,t.jsx)(n.code,{children:"FormGroup"})," and have it propagate to the label and input)."]}),"\n",(0,t.jsx)(o,{language:"jsx",live:!0,children:c}),"\n",(0,t.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,t.jsx)(n.h3,{id:"formcheck",children:"FormCheck"}),"\n",(0,t.jsx)(r,{name:"FormCheck"}),"\n",(0,t.jsx)(n.h3,{id:"formcheckinput",children:"FormCheckInput"}),"\n",(0,t.jsx)(r,{name:"FormCheckInput"}),"\n",(0,t.jsx)(n.h3,{id:"formchecklabel",children:"FormCheckLabel"}),"\n",(0,t.jsx)(r,{name:"FormCheckLabel"})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(b,{...e})}):b(e)}function y(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>c});var r=o(96540);const t={},i=r.createContext(t);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);