"use strict";(self.webpackChunkreact_bootstrap_website=self.webpackChunkreact_bootstrap_website||[]).push([[2834],{42834:e=>{e.exports=JSON.parse('{"description":"","props":{"children":{"required":true,"tsType":{"name":"union","raw":"| React.ReactElement\\n| ((props: OverlayTriggerRenderProps) => React.ReactNode)","elements":[{"name":"ReactReactElement","raw":"React.ReactElement"},{"name":"unknown"}]},"description":"","doclets":{}},"trigger":{"required":false,"tsType":{"name":"union","raw":"OverlayTriggerType | OverlayTriggerType[] | undefined","elements":[{"name":"union","raw":"\'hover\' | \'click\' | \'focus\'","elements":[{"name":"literal","value":"\'hover\'"},{"name":"literal","value":"\'click\'"},{"name":"literal","value":"\'focus\'"}]},{"name":"Array","elements":[{"name":"union","raw":"\'hover\' | \'click\' | \'focus\'","elements":[{"name":"literal","value":"\'hover\'"},{"name":"literal","value":"\'click\'"},{"name":"literal","value":"\'focus\'"}]}],"raw":"OverlayTriggerType[]"},{"name":"undefined"}]},"description":"Specify which action or actions trigger Overlay visibility\\n\\nThe `click` trigger ignores the configured `delay`.","defaultValue":{"value":"[\'hover\', \'focus\']","computed":false},"doclets":{}},"delay":{"required":false,"tsType":{"name":"union","raw":"OverlayDelay | undefined","elements":[{"name":"union","raw":"number | { show: number; hide: number }","elements":[{"name":"number"},{"name":"signature","type":"object","raw":"{ show: number; hide: number }","signature":{"properties":[{"key":"show","value":{"name":"number","required":true}},{"key":"hide","value":{"name":"number","required":true}}]}}]},{"name":"undefined"}]},"description":"A millisecond delay amount to show and hide the Overlay once triggered","doclets":{}},"show":{"required":false,"tsType":{"name":"union","raw":"boolean | undefined","elements":[{"name":"boolean"},{"name":"undefined"}]},"description":"The visibility of the Overlay. `show` is a _controlled_ prop so should be paired\\nwith `onToggle` to avoid breaking user interactions.\\n\\nManually toggling `show` does **not** wait for `delay` to change the visibility.","doclets":{"controllable":"onToggle"}},"defaultShow":{"required":false,"tsType":{"name":"union","raw":"boolean | undefined","elements":[{"name":"boolean"},{"name":"undefined"}]},"description":"The initial visibility state of the Overlay.","defaultValue":{"value":"false","computed":false},"doclets":{}},"onToggle":{"required":false,"tsType":{"name":"union","raw":"((nextShow: boolean) => void) | undefined","elements":[{"name":"unknown"},{"name":"undefined"}]},"description":"A callback that fires when the user triggers a change in tooltip visibility.\\n\\n`onToggle` is called with the desired next `show`, and generally should be passed\\nback to the `show` prop. `onToggle` fires _after_ the configured `delay`","doclets":{"type":"((nextShow: boolean) => void) | undefined","controllable":"`show`"}},"flip":{"required":false,"tsType":{"name":"union","raw":"boolean | undefined","elements":[{"name":"boolean"},{"name":"undefined"}]},"description":"The initial flip state of the Overlay. If `placement` is specified and is anything\\n    other than \\"auto\\", this prop will default to `false`, otherwise the default is `true`.","defaultValue":{"value":"placement && placement.indexOf(\'auto\') !== -1","computed":false},"doclets":{}},"overlay":{"required":true,"tsType":{"name":"OverlayChildren"},"description":"An element or text to overlay next to the target.","doclets":{"type":"React.ReactElement<OverlayInjectedProps> | ((injected: OverlayInjectedProps) => React.ReactNode)"}},"placement":{"required":false,"tsType":{"name":"union","raw":"Placement | undefined","elements":[{"name":"Placement"},{"name":"undefined"}]},"description":"The placement of the Overlay in relation to it\'s `target`.","doclets":{}},"popperConfig":{"defaultValue":{"value":"{}","computed":false},"required":false,"doclets":{}}}}')}}]);