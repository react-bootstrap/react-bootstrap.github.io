"use strict";(self.webpackChunkreact_bootstrap_website=self.webpackChunkreact_bootstrap_website||[]).push([[3352],{53352:e=>{e.exports=JSON.parse('{"description":"","props":{"id":{"required":false,"tsType":{"name":"union","raw":"string | undefined","elements":[{"name":"string"},{"name":"undefined"}]},"description":"ID of the TabContainer.","doclets":{}},"transition":{"required":false,"tsType":{"name":"union","raw":"TransitionType | undefined","elements":[{"name":"union","raw":"boolean | TransitionComponent","elements":[{"name":"boolean"},{"name":"TransitionComponent"}]},{"name":"undefined"}]},"description":"Sets a default animation strategy for all children `<TabPane>`s.\\nDefaults to `<Fade>` animation; else, use `false` to disable, or a\\ncustom react-transition-group `<Transition/>` component.","doclets":{}},"mountOnEnter":{"required":false,"tsType":{"name":"union","raw":"boolean | undefined","elements":[{"name":"boolean"},{"name":"undefined"}]},"description":"Wait until the first \\"enter\\" transition to mount tabs (add them to the DOM)","doclets":{}},"unmountOnExit":{"required":false,"tsType":{"name":"union","raw":"boolean | undefined","elements":[{"name":"boolean"},{"name":"undefined"}]},"description":"Unmount tabs (remove it from the DOM) when they are no longer visible","doclets":{}},"generateChildId":{"required":false,"tsType":{"name":"union","raw":"| ((eventKey: EventKey, type: \'tab\' | \'pane\') => string)\\n| undefined","elements":[{"name":"unknown"},{"name":"undefined"}]},"description":"A function that takes an `eventKey` and `type` and returns a unique id for\\nchild tab `<NavItem>`s and `<TabPane>`s. The function _must_ be a pure\\nfunction, meaning it should always return the _same_ id for the same set\\nof inputs. The default value requires that an `id` to be set for the\\n`<TabContainer>`.\\n\\nThe `type` argument will either be `\\"tab\\"` or `\\"pane\\"`.","doclets":{"type":"((eventKey: EventKey, type: \'tab\' | \'pane\') => string) | undefined","defaultValue":"(eventKey, type) => `${props.id}-${type}-${eventKey}`"}},"onSelect":{"required":false,"tsType":{"name":"union","raw":"SelectCallback | undefined","elements":[{"name":"SelectCallback"},{"name":"undefined"}]},"description":"A callback fired when a tab is selected.","doclets":{"controllable":"activeKey"}},"activeKey":{"required":false,"tsType":{"name":"union","raw":"EventKey | undefined","elements":[{"name":"EventKey"},{"name":"undefined"}]},"description":"The `eventKey` of the currently active tab.","doclets":{"controllable":"onSelect"}},"defaultActiveKey":{"required":false,"tsType":{"name":"union","raw":"EventKey | undefined","elements":[{"name":"EventKey"},{"name":"undefined"}]},"description":"Default value for `eventKey`.","doclets":{}}}}')}}]);