"use strict";(self.webpackChunkreact_bootstrap_website=self.webpackChunkreact_bootstrap_website||[]).push([[1816],{81816:e=>{e.exports=JSON.parse('{"description":"","props":{"as":{"required":false,"tsType":{"name":"union","raw":"React.ElementType | undefined","elements":[{"name":"ReactElementType","raw":"React.ElementType"},{"name":"undefined"}]},"description":"Control the rendering of the DropdownMenu. All non-menu props\\n(listed here) are passed through to the `as` Component.\\n\\nIf providing a custom, non DOM, component. the `show`, `close` and `align` props\\nare also injected and should be handled appropriately.","defaultValue":{"value":"\'div\'","computed":false},"doclets":{}},"bsPrefix":{"required":false,"tsType":{"name":"union","raw":"string | undefined","elements":[{"name":"string"},{"name":"undefined"}]},"description":"","doclets":{"default":"\'dropdown-menu\'"}},"show":{"required":false,"tsType":{"name":"union","raw":"boolean | undefined","elements":[{"name":"boolean"},{"name":"undefined"}]},"description":"Controls the visibility of the Dropdown menu","doclets":{}},"renderOnMount":{"required":false,"tsType":{"name":"union","raw":"boolean | undefined","elements":[{"name":"boolean"},{"name":"undefined"}]},"description":"Whether to render the dropdown menu in the DOM before the first time it is shown","doclets":{}},"flip":{"required":false,"tsType":{"name":"union","raw":"boolean | undefined","elements":[{"name":"boolean"},{"name":"undefined"}]},"description":"Have the dropdown switch to it\'s opposite placement when necessary to stay on screen.","defaultValue":{"value":"true","computed":false},"doclets":{}},"align":{"required":false,"tsType":{"name":"union","raw":"AlignType | undefined","elements":[{"name":"AlignType"},{"name":"undefined"}]},"description":"Aligns the dropdown menu to the specified side of the container. You can also align\\nthe menu responsively for breakpoints starting at `sm` and up. The alignment\\ndirection will affect the specified breakpoint or larger.\\n\\n*Note: Using responsive alignment will disable Popper usage for positioning.*","doclets":{}},"rootCloseEvent":{"required":false,"tsType":{"name":"union","raw":"\'click\' | \'mousedown\' | undefined","elements":[{"name":"literal","value":"\'click\'"},{"name":"literal","value":"\'mousedown\'"},{"name":"undefined"}]},"description":"Which event when fired outside the component will cause it to be closed\\n\\n*Note: For custom dropdown components, you will have to pass the\\n`rootCloseEvent` to `<RootCloseWrapper>` in your custom dropdown menu\\ncomponent ([similarly to how it is implemented in `<Dropdown.Menu>`](https://github.com/react-bootstrap/react-bootstrap/blob/v0.31.5/src/DropdownMenu.js#L115-L119)).*","doclets":{}},"popperConfig":{"required":false,"tsType":{"name":"union","raw":"UseDropdownMenuOptions[\'popperConfig\'] | undefined","elements":[{"name":"UseDropdownMenuOptions[\'popperConfig\']","raw":"UseDropdownMenuOptions[\'popperConfig\']"},{"name":"undefined"}]},"description":"A set of popper options and props passed directly to Popper.","doclets":{}},"variant":{"required":false,"tsType":{"name":"union","raw":"DropdownMenuVariant | undefined","elements":[{"name":"union","raw":"\'dark\' | string","elements":[{"name":"literal","value":"\'dark\'"},{"name":"string"}]},{"name":"undefined"}]},"description":"Menu color variant.\\n\\nOmitting this will use the default light color.","doclets":{}}}}')}}]);