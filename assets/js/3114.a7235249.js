"use strict";(self.webpackChunkreact_bootstrap_website=self.webpackChunkreact_bootstrap_website||[]).push([[3114],{33114:e=>{e.exports=JSON.parse('{"description":"A convenience component for simple or general use split button dropdowns. Renders a\\n`ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\\nare passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`\'s\\nprops](#dropdown-props).\\n\\n_All unknown props are passed through to the `Dropdown` component._\\nThe Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\\nand menu-related props are passed to the `Dropdown.Menu`","props":{"menuRole":{"required":false,"tsType":{"name":"union","raw":"string | undefined","elements":[{"name":"string"},{"name":"undefined"}]},"description":"An ARIA accessible role applied to the Menu component.","doclets":{}},"renderMenuOnMount":{"required":false,"tsType":{"name":"union","raw":"boolean | undefined","elements":[{"name":"boolean"},{"name":"undefined"}]},"description":"Whether to render the dropdown menu in the DOM before the first time it is shown","doclets":{}},"rootCloseEvent":{"required":false,"tsType":{"name":"union","raw":"\'click\' | \'mousedown\' | undefined","elements":[{"name":"literal","value":"\'click\'"},{"name":"literal","value":"\'mousedown\'"},{"name":"undefined"}]},"description":"Which event when fired outside the component will cause it to be closed.\\n\\n_see [DropdownMenu](#dropdown-menu-props) for more details_","doclets":{}},"href":{"required":false,"tsType":{"name":"union","raw":"string | undefined","elements":[{"name":"string"},{"name":"undefined"}]},"description":"An `href` passed to the non-toggle Button","doclets":{}},"target":{"required":false,"tsType":{"name":"union","raw":"string | undefined","elements":[{"name":"string"},{"name":"undefined"}]},"description":"An anchor `target` passed to the non-toggle Button","doclets":{}},"title":{"required":true,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"The content of the non-toggle Button.","doclets":{}},"toggleLabel":{"required":false,"tsType":{"name":"union","raw":"string | undefined","elements":[{"name":"string"},{"name":"undefined"}]},"description":"Accessible label for the toggle; the value of `title` if not specified.","defaultValue":{"value":"\'Toggle dropdown\'","computed":false},"doclets":{}},"type":{"required":false,"tsType":{"name":"union","raw":"\'submit\' | \'reset\' | \'button\' | undefined","elements":[{"name":"literal","value":"\'submit\'"},{"name":"literal","value":"\'reset\'"},{"name":"literal","value":"\'button\'"},{"name":"undefined"}]},"description":"","defaultValue":{"value":"\'button\'","computed":false},"doclets":{}},"flip":{"required":false,"tsType":{"name":"union","raw":"boolean | undefined","elements":[{"name":"boolean"},{"name":"undefined"}]},"description":"Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\\nPopper.js\'s flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).","doclets":{}}}}')}}]);