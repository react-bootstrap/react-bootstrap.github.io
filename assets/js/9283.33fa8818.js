"use strict";(self.webpackChunkreact_bootstrap_website=self.webpackChunkreact_bootstrap_website||[]).push([[9283],{79283:e=>{e.exports=JSON.parse('{"description":"","props":{"bsPrefix":{"type":{"name":"string"},"required":false,"description":"","doclets":{"default":"\'navbar\'"}},"variant":{"type":{"name":"string"},"required":false,"description":"The general visual variant a the Navbar.\\nUse in combination with the `bg` prop, `background-color` utilities,\\nor your own background styles.","doclets":{"type":"{(\'light\'|\'dark\')}"}},"expand":{"type":{"name":"union","value":[{"name":"bool"},{"name":"string"}]},"required":false,"description":"The breakpoint, below which, the Navbar will collapse.\\nWhen `true` the Navbar will always be expanded regardless of screen size.","doclets":{}},"bg":{"type":{"name":"string"},"required":false,"description":"A convenience prop for adding `bg-*` utility classes since they are so commonly used here.\\n`light` and `dark` are common choices but any `bg-*` class is supported, including any custom ones you might define.\\n\\nPairs nicely with the `variant` prop.","doclets":{}},"fixed":{"type":{"name":"enum","value":[{"value":"\'top\'","computed":false},{"value":"\'bottom\'","computed":false}]},"required":false,"description":"Create a fixed navbar along the top or bottom of the screen, that scrolls with the\\npage. A convenience prop for the `fixed-*` positioning classes.","doclets":{}},"sticky":{"type":{"name":"enum","value":[{"value":"\'top\'","computed":false},{"value":"\'bottom\'","computed":false}]},"required":false,"description":"Position the navbar at the top or bottom of the viewport, but only after scrolling past it.\\nA convenience prop for the `sticky-*` positioning classes.","doclets":{}},"as":{"type":{"name":"elementType"},"required":false,"description":"Set a custom element for this component.","doclets":{}},"onToggle":{"type":{"name":"func"},"required":false,"description":"A callback fired when the `<Navbar>` body collapses or expands. Fired when\\na `<Navbar.Toggle>` is clicked and called with the new `expanded`\\nboolean value.","doclets":{"controllable":"expanded"}},"onSelect":{"type":{"name":"func"},"required":false,"description":"A callback fired when a descendant of a child `<Nav>` is selected. Should\\nbe used to execute complex closing or other miscellaneous actions desired\\nafter selecting a descendant of `<Nav>`. Does nothing if no `<Nav>` or `<Nav>`\\ndescendants exist. The callback is called with an eventKey, which is a\\nprop from the selected `<Nav>` descendant, and an event.\\n\\n```js\\nfunction (\\n eventKey: mixed,\\n event?: SyntheticEvent\\n)\\n```\\n\\nFor basic closing behavior after all `<Nav>` descendant onSelect events in\\nmobile viewports, try using collapseOnSelect.\\n\\nNote: If you are manually closing the navbar using this `OnSelect` prop,\\nensure that you are setting `expanded` to false and not *toggling* between\\ntrue and false.","doclets":{}},"collapseOnSelect":{"type":{"name":"bool"},"required":false,"description":"Toggles `expanded` to `false` after the onSelect event of a descendant of a\\nchild `<Nav>` fires. Does nothing if no `<Nav>` or `<Nav>` descendants exist.\\n\\n`<NavLink>` descendants of `<Nav>` will not trigger the `onSelect` event unless\\nan `eventKey` or `href` prop is defined.\\n\\nManually controlling `expanded` via the onSelect callback is recommended instead,\\nfor more complex operations that need to be executed after\\nthe `select` event of `<Nav>` descendants.","doclets":{}},"expanded":{"type":{"name":"bool"},"required":false,"description":"Controls the visibility of the navbar body","doclets":{"controllable":"onToggle"}},"role":{"type":{"name":"string"},"required":false,"description":"The ARIA role for the navbar, will default to \'navigation\' for\\nNavbars whose `as` is something other than `<nav>`.","doclets":{"default":"\'navigation\'"}}}}')}}]);